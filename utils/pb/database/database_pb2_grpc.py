# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import database_pb2 as database__pb2


class BookDatabaseStub(object):
    """The gRPC service definition for the Book Database
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.Read = channel.unary_unary(
                '/bookdb.BookDatabase/Read',
                request_serializer=database__pb2.BookRead.SerializeToString,
                response_deserializer=database__pb2.BookStock.FromString,
                )
        self.Write = channel.unary_unary(
                '/bookdb.BookDatabase/Write',
                request_serializer=database__pb2.BookWrite.SerializeToString,
                response_deserializer=database__pb2.UpdateAck.FromString,
                )
        self.check_Write = channel.unary_unary(
                '/bookdb.BookDatabase/check_Write',
                request_serializer=database__pb2.BookWrite.SerializeToString,
                response_deserializer=database__pb2.UpdateAck.FromString,
                )
        self.UpdateSlave = channel.unary_unary(
                '/bookdb.BookDatabase/UpdateSlave',
                request_serializer=database__pb2.BookWrite.SerializeToString,
                response_deserializer=database__pb2.UpdateAck.FromString,
                )


class BookDatabaseServicer(object):
    """The gRPC service definition for the Book Database
    """

    def Read(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Write(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def check_Write(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def UpdateSlave(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_BookDatabaseServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'Read': grpc.unary_unary_rpc_method_handler(
                    servicer.Read,
                    request_deserializer=database__pb2.BookRead.FromString,
                    response_serializer=database__pb2.BookStock.SerializeToString,
            ),
            'Write': grpc.unary_unary_rpc_method_handler(
                    servicer.Write,
                    request_deserializer=database__pb2.BookWrite.FromString,
                    response_serializer=database__pb2.UpdateAck.SerializeToString,
            ),
            'check_Write': grpc.unary_unary_rpc_method_handler(
                    servicer.check_Write,
                    request_deserializer=database__pb2.BookWrite.FromString,
                    response_serializer=database__pb2.UpdateAck.SerializeToString,
            ),
            'UpdateSlave': grpc.unary_unary_rpc_method_handler(
                    servicer.UpdateSlave,
                    request_deserializer=database__pb2.BookWrite.FromString,
                    response_serializer=database__pb2.UpdateAck.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'bookdb.BookDatabase', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class BookDatabase(object):
    """The gRPC service definition for the Book Database
    """

    @staticmethod
    def Read(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/bookdb.BookDatabase/Read',
            database__pb2.BookRead.SerializeToString,
            database__pb2.BookStock.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Write(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/bookdb.BookDatabase/Write',
            database__pb2.BookWrite.SerializeToString,
            database__pb2.UpdateAck.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def check_Write(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/bookdb.BookDatabase/check_Write',
            database__pb2.BookWrite.SerializeToString,
            database__pb2.UpdateAck.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def UpdateSlave(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/bookdb.BookDatabase/UpdateSlave',
            database__pb2.BookWrite.SerializeToString,
            database__pb2.UpdateAck.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
